---
title: "Climbing Benchmark Analyzer"
server: shiny
format: 
  dashboard:
    scrolling: false 
    orientation: rows
---

```{r echo=FALSE, message=FALSE, msg = F, warning = F, error = F}
#| context: setup

library(magrittr)
library(shiny) 
library(lubridate)
library(reactable) 
library(reactablefmtr) 
library(crosstalk) 
library(plotly)
library(bslib) 
library(bsicons) 
library(htmltools) 
library(bayesboot)
# library(gauntlet)

library(tidyverse, quietly = TRUE)

targets::tar_source(files = "R")

```

## {.toolbar}

```{r}

actionButton(inputId = "button", "Welcome\nHelp")

fileInput(
    inputId = "peak_force", label = "Upload Peak Force", multiple = F, accept = ".csv"
    ,width = "400px"
  )

shiny::numericInput(
  inputId = "user_weight", label = "User Weight:", value = 150
)
```

```{r}
uiOutput("peak_force_grip_select")
```

## Input {.tabset}

### LBF
```{r}
plotlyOutput("peak_force_trace")
```

### % Body Weight
```{r}
plotlyOutput("peak_force_trace_wadj")
```

## {-}

## Input {height = 40%}

```{r}
plotlyOutput("peak_force_boxplot")
```

## Input {height = 40%}
```{r}
plotlyOutput("peak_force_boots")
```



```{r}
#| context: server

  #SECTION: data initialization=================================================
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  shiny::observeEvent(input$button, {
    shiny::showModal(
      shiny::modalDialog(
        # "hello",
        includeHTML("./inst/app/www/modal_intro.html"),
        size = "l",
        easyClose = TRUE
      ))
  })


peak_force = shiny::reactive({
  req(input$peak_force)
  file <- input$peak_force
  ext <- tools::file_ext(file$datapath)
  
  validate(need(ext == "csv", "Please upload a csv file"))
  
  temp_data = read.csv(file$datapath)
  
  assign("butt", temp_data, envir = .GlobalEnv)
  
  temp_data  = temp_data %>% 
    process_peak_force()
  
  return(temp_data)
})

peak_force_boots = shiny::reactive({
  print("boots")
  temp_data = peak_force() %>% 
    process_boots()
  
  return(temp_data)
})


peak_force_shared = shiny::reactive({
  req(input$user_weight)
  
  temp_shared = peak_force() %>% 
    mutate(across(
      c(value, rep_total, mean_grip_type_hand)
      ,~100*round(.x/input$user_weight, 2), .names = "{.col}_wadj")) %>% 
    mutate(label_wadj = str_glue("{grip_type}\n% BW: {value_wadj}%\n% BW Rep: {rep_total_wadj}"))  %>%
    SharedData$new()
  
  return(temp_shared)
})

output$table_peak_force <- renderReactable({
  
  tmp_table = peak_force() %>% 
    reactable()

  return(tmp_table)
})


output$peak_force_grip_select = renderUI({
  crosstalk:::filter_checkbox(id = "peak_force", label = "Grip Type: ", peak_force_shared(), ~grip_type, inline = T)
})

output$peak_force_trace = renderPlotly({
  tmp_plot = peak_force_shared() %>% 
      plot_ly(
        x = ~rep_number, y = ~value , color = ~hand
        ,text = ~label, hoverinfo = "text"
        ,split = ~grip_type
        ,mode = 'lines+markers') %>%
      layout(
        yaxis = list(title = "Max Force (lbf)")
        ,xaxis = list(title = "Rep Number")
      ) %>% 
    layout(legend = list(orientation = 'h',x = 0, y = 1.11)) %>% 
    config(displaylogo = FALSE, modeBarButtonsToRemove = c("toImage", "drawrect", "lasso2d", "zoom2d"))
  
  return(tmp_plot)
})

output$peak_force_trace_wadj = renderPlotly({
  tmp_plot = peak_force_shared() %>% 
      plot_ly(
        x = ~rep_number, y = ~value_wadj, color = ~hand
        ,text = ~label_wadj, hoverinfo = "text"
        ,split = ~grip_type
        ,mode = 'lines+markers') %>%
      layout(
        yaxis = list(title = "% Body Weight")
        ,xaxis = list(title = "Rep Number")
      ) %>% 
    layout(legend = list(orientation = 'h',x = 0, y = 1.11)) %>% 
    config(displaylogo = FALSE, modeBarButtonsToRemove = c("toImage", "drawrect", "lasso2d", "zoom2d"))
  
  return(tmp_plot)
})

output$peak_force_boxplot = renderPlotly({
  tmp_plot = (
    peak_force_shared()  %>%
      ggplot() + 
      geom_boxplot(aes(grip_type, value)) + 
      geom_point(aes(grip_type, value, color = session_type, size = session_type)) + 
      scale_size_discrete(range = c(4, 2)) +
      labs(color = "Session", size = "Session"
           ,y = "Max Force (lbf)", x = "") + 
      theme(legend.position = "top") 
      # facet_grid(rows = vars(grip_type))
  ) %>% 
    ggplotly() %>% 
    layout(legend = list(orientation = 'h',x = 0, y = 1.1)) %>% 
    config(displaylogo = FALSE, modeBarButtonsToRemove = c("toImage", "drawrect", "lasso2d", "zoom2d"))
  
  return(tmp_plot)
})



output$peak_force_boots = renderPlotly({
  tmp_plot = plot_boots(
    peak_force_boots()
  )
  
  return(tmp_plot)
})

```
