---
title: "Benchmark Analyzer"
server: shiny
format: 
  dashboard:
    scrolling: false 
    orientation: rows
---

```{r echo=FALSE, message=FALSE, msg = F, warning = F, error = F}
#| context: setup

library(magrittr)
library(shiny) 
library(lubridate)
library(reactable) 
library(reactablefmtr) 
library(crosstalk) 
library(plotly)
library(bslib) 
library(bsicons) 
library(htmltools) 

library(tidyverse, quietly = TRUE)

targets::tar_source(files = "R")

```


## Input {.fill height = 10%}

```{r}
# | panel: input

fileInput(
    inputId = "peak_force", label = "Upload Peak Force", multiple = F, accept = ".csv"
  )

uiOutput("peak_force_grip_select")
```

## Input {.flow height = 40%}
```{r}
plotlyOutput("peak_force_trace")
```

## Input {.flow height = 40%}
```{r}
plotlyOutput("peak_force_boxplot")
```

## Input {.flow height = 40%}

```{r}
reactableOutput('table_peak_force')
```

```{r}
#| context: server

peak_force = shiny::reactive({
  file <- input$peak_force
  ext <- tools::file_ext(file$datapath)
  
  req(file)
  validate(need(ext == "csv", "Please upload a csv file"))
  
  temp_data = read.csv(file$datapath)
  
  assign("butt", temp_data, envir = .GlobalEnv)
  
  temp_data  = temp_data %>% 
    process_peak_force()
  
  return(temp_data)
})


peak_force_shared = shiny::reactive({
  temp_shared = SharedData$new(peak_force())
  
  return(temp_shared)
})


output$table_peak_force <- renderReactable({
  
  tmp_table = peak_force() %>% 
    reactable()

  return(tmp_table)
})


output$peak_force_grip_select = renderUI({
  crosstalk::filter_select(id = "peak_force", label = "Grip Type", peak_force_shared(), ~grip_type, multiple = T)
})

output$peak_force_trace = renderPlotly({
  tmp_plot = peak_force_shared() %>% 
      plot_ly(
        x = ~rep_number, y = ~value , color = ~hand
        ,text = ~label, hoverinfo = "text"
        ,split = ~grip_type
        ,mode = 'lines+markers') %>%
      layout(
        yaxis = list(title = "Max Force (lbf)")
        ,xaxis = list(title = "Rep Number")
      ) %>% 
    layout(legend = list(orientation = 'h',x = 0, y = 1.11)) %>% 
    config(displaylogo = FALSE, modeBarButtonsToRemove = c("toImage", "drawrect", "lasso2d", "zoom2d"))
  
  return(tmp_plot)
})

output$peak_force_boxplot = renderPlotly({
  tmp_plot = (
    peak_force_shared()  %>%
      ggplot() + 
      geom_boxplot(aes(grip_type, value)) + 
      geom_point(aes(grip_type, value, color = session_type, size = session_type)) + 
      scale_size_discrete(range = c(4, 2)) +
      labs(color = "Session", size = "Session"
           ,y = "Max Force (lbf)", x = "") + 
      theme(legend.position = "top") 
      # facet_grid(rows = vars(grip_type))
  ) %>% 
    ggplotly() %>% 
    layout(legend = list(orientation = 'h',x = 0, y = 1.1)) %>% 
    config(displaylogo = FALSE, modeBarButtonsToRemove = c("toImage", "drawrect", "lasso2d", "zoom2d"))
  
  return(tmp_plot)
})


```




